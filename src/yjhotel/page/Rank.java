package yjhotel.page;import java.awt.BorderLayout;import java.awt.Color;import java.awt.Dimension;import java.awt.Font;import java.awt.Graphics;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.sql.Connection;import java.sql.ResultSet;import java.sql.SQLException;import java.sql.Statement;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Collections;import java.util.Comparator;import java.util.GregorianCalendar;import java.util.HashMap;import java.util.Iterator;import java.util.LinkedHashMap;import java.util.LinkedList;import java.util.Map;import java.util.Map.Entry;import java.util.Set;import javax.swing.JButton;import javax.swing.JLabel;import javax.swing.JPanel;import javax.swing.border.LineBorder;import yjhotel.Page;import yjhotel.YJHotel;import yjhotel.page.Rank.paint_chart2;public class Rank extends Page implements ActionListener {	private static final long serialVersionUID = -8513663912542614250L;	JPanel r_P;	JButton r_Back, r_Home;	JLabel r_Label;	int r_Cnt = 0, r_Cnt2 = 0, r_Cnt3 = 0;	Font f1 = new Font("HYPMokGak", Font.BOLD, 11); // 버튼	Font f2 = new Font("HYPMokGak", Font.BOLD, 22); // 레이블	Font f3 = new Font("HYPMokGak", Font.BOLD, 17); // 그래프 종류	Font f4 = new Font("HYPMokGak", Font.BOLD, 19); // 그래프 종류	LineBorder l1 = new LineBorder(Color.BLACK, 2, true);	int[] h_All_Cnt;	String[][] l_All_Cnt;	int[] y;	// 공통 변수	int h_Total = 0;	int ch_F;	// 1번째 그래프 변수	Calendar calendar;	SimpleDateFormat SDF;	String[] One_Week;	int[] Hotel_Unit;	// 2번째 그래프 변수	String[] chart2_Name;	String[] h_Name;	int[] chart2_Num;	double y_per;	// 3번째 그래프 변수	int loca_Total = 0;	String[] chart3_Name;	String[] loca_Name;	int[] chart3_Num;	public Rank() {		super("RANKING", "순위");		setPreferredSize(new Dimension(550, 660));		// 1번째 그래프 그릴 때 필요한 데이터 가져 옴		set_RData1();		setLayout(new BorderLayout());		// 그래프 1~3		drawRank_Bottom1();		drawRank_Bottom2();		drawRank_Bottom3();	}	@Override	public void onMount(Object param) {		System.out.println("패널");	}	// r_G1(그래프 1 패널)	public void drawRank_Bottom1() {		// 패널 생성		r_P = new JPanel();		r_P.setLayout(null);		this.add(r_P);		// 그래프 패널 생성		JPanel r_G1 = new JPanel();		r_G1.setLayout(null);		r_P.add(r_G1);		r_G1.setBorder(l1);		r_G1.setBounds(2, 5, 545, 200);		JLabel cnt_Label = new JLabel("예약 이용자 수");		cnt_Label.setFont(f3);		cnt_Label.setBounds((int) (240 - 62.5), 6, 125, 30);		cnt_Label.setOpaque(true);		cnt_Label.setHorizontalAlignment(JLabel.CENTER);		r_G1.add(cnt_Label);		JLabel[] Unit_Cnt = new JLabel[7];		paint_chart1 L1 = new paint_chart1();		L1.setLayout(null);		L1.setBounds(40, 25, 400, 141);		r_G1.add(L1);		String[] H_Unit_S = new String[7];		// 날짜 당 고객 수를 그래프의 점 위에 표시		int Unit_X = 20;		for (int i = 0; i < 7; i++) {			H_Unit_S[i] = Hotel_Unit[6 - i] + "";			Unit_Cnt[i] = new JLabel(H_Unit_S[i]);			int Unit_y = 80 - (int) (Hotel_Unit[6 - i] * 1.1);			if (Unit_y <= -8)				Unit_y = -8;			Unit_Cnt[i].setBounds(Unit_X - 4, Unit_y, 40, 50);//				Unit_Cnt[i].setOpaque(true);//				Unit_Cnt[i].setBackground(Color.red);			Unit_Cnt[i].setHorizontalAlignment(JLabel.LEFT);			Unit_X += 60;			L1.add(Unit_Cnt[i]);		}		// 그래프 x축 + y축 설명		JLabel[] y_Axis = new JLabel[4];		JLabel[] x_Axis = new JLabel[7];		double chart1_num = 20;		int gr_x = 10, gr_y = 99; // 원래 115		int grr_x = 0, grr_y = 155;		for (int i = 0; i < 4; i++) {			y_Axis[i] = new JLabel(chart1_num + "");			chart1_num += 20;			y_Axis[i].setBounds(gr_x, gr_y, 50, 50);			gr_y -= 22; // 원래 30			r_G1.add(y_Axis[i]);		}		for (int i = 0; i < 7; i++) {			x_Axis[i] = new JLabel(One_Week[6 - i]);			x_Axis[i].setBounds(grr_x, grr_y, 130, 50);			x_Axis[i].setHorizontalAlignment(JLabel.CENTER);			x_Axis[i].setFont(new Font("HYPMokGak", Font.BOLD, 9));			r_G1.add(x_Axis[i]);			grr_x += 60;		}	}	public void drawRank_Bottom2() {		// 그래프 패널 생성		JPanel r_G2 = new JPanel();		r_G2.setLayout(null);		r_P.add(r_G2);		r_G2.setBorder(l1);		r_G2.setBounds(2, 225, 545, 200);		JLabel grade_Label = new JLabel("숙소별 이용자 수");		grade_Label.setFont(f3);		grade_Label.setBounds(/* 190, 6, 100, 30 */(int) (240 - 72.5), 6, 145, 30);		grade_Label.setOpaque(true);		// grade_Label.setBackground(Color.pink);		grade_Label.setHorizontalAlignment(JLabel.CENTER);		r_G2.add(grade_Label);		// 별점 x축 y축 레이블		JLabel ch2_num[] = new JLabel[4];		JLabel ch2_nam[] = new JLabel[4];		int gr_num = 50;		int gr_x = 10, gr_y = 100; // 원래 115		int grr_x = 20, grr_y = 155;		for (int i = 0; i < 4; i++) {			ch2_num[i] = new JLabel(gr_num + "");			gr_num += 50;			ch2_num[i].setBounds(gr_x, gr_y, 50, 50);			gr_y -= 25; // 원래 30			r_G2.add(ch2_num[i]);			ch2_nam[i] = new JLabel(chart2_Name[chart2_Name.length - i - 1]);			ch2_nam[i].setBounds(grr_x, grr_y, 130, 50);			ch2_nam[i].setHorizontalAlignment(JLabel.CENTER);			r_G2.add(ch2_nam[i]);			grr_x += 100;		}		paint_chart2 L2 = new paint_chart2();		L2.setBounds(40, 25, 390, 141);		L2.setLayout(null);		r_G2.add(L2);		JLabel gr_n[] = new JLabel[4];		int gr_X = 37;		for (int i = 0; i < 4; i++) {			double y_per2 = 0.6;			gr_n[i] = new JLabel(chart2_Num[chart2_Num.length - i - 1] + "");			int gr_n_y = 102 - (int) (y_per2 * chart2_Num[chart2_Num.length - 1 - i]);			if (gr_n_y <= -18)				gr_n_y = -18;			gr_n[i].setBounds(gr_X, gr_n_y, 30, 50);//				System.out.printf("\ngr-n[i] = %d", gr_n_y);			gr_X += 100;			L2.add(gr_n[i]);		}	}	// r_G3(그래프 3 패널)	public void drawRank_Bottom3() {		// 그래프 패널 생성		JPanel r_G3 = new JPanel();		r_G3.setLayout(null);		r_P.add(r_G3);		r_G3.setBorder(l1);		r_G3.setBounds(2, 445, 545, 200);		JLabel location_Label = new JLabel("지역별 이용자 수");		location_Label.setFont(f3);		location_Label.setBounds((int) (240 - 72.5), 6, 145, 30);		location_Label.setOpaque(true);		// location_Label.setBackground(Color.pink);		location_Label.setHorizontalAlignment(JLabel.CENTER);		r_G3.add(location_Label);		paint_chart3 L3 = new paint_chart3();		L3.setBounds(40, 25, 390, 141);		L3.setLayout(null);		r_G3.add(L3);		// 별점 x축 y축 레이블		JLabel ch3_num[] = new JLabel[4];		JLabel ch3_nam[] = new JLabel[ch_F];		int gr_num = 50;		int gr_x = 10, gr_y = 100; // 원래 115		int grr_x = 20, grr_y = 155;		for (int i = 0; i < ch_F; i++) {			ch3_nam[i] = new JLabel(chart3_Name[chart3_Name.length - i - 1]);			ch3_nam[i].setBounds(grr_x, grr_y, 130, 50);			ch3_nam[i].setHorizontalAlignment(JLabel.CENTER);			r_G3.add(ch3_nam[i]);			grr_x += 100;		}		for (int i = 0; i < 4; i++) {			ch3_num[i] = new JLabel(gr_num + "");			gr_num += 50;			ch3_num[i].setBounds(gr_x, gr_y, 50, 50);			gr_y -= 25;			r_G3.add(ch3_num[i]);		}		JLabel gr_n3[] = new JLabel[ch_F];		int gr_X3 = 37;		for (int i = 0; i < ch_F; i++) {			double y_per3 = 0.6;			gr_n3[i] = new JLabel(chart3_Num[chart3_Num.length - i - 1] + "");			int gr_n_y = 102 - (int) (y_per3 * chart3_Num[chart3_Num.length - 1 - i]);			if (gr_n_y <= -18) {				gr_n_y = -18;			}			gr_n3[i].setBounds(gr_X3, gr_n_y, 30, 50);//			System.out.println("gr_X = " + gr_X3);			L3.add(gr_n3[i]);			gr_X3 += 100;		}	}	// 아직 추가 X	public void actionPerformed(ActionEvent e) {	}	// 그래프 1에 필요한 데이터 저장	public void set_RData1() {		// 일주일 생성		calendar = new GregorianCalendar();		SDF = new SimpleDateFormat("yyyy-MM-dd");		One_Week = new String[7];		String stat = "기록";		String stat2 = "예약중";		for (int i = 0; i < 7; i++) {			One_Week[i] = SDF.format(calendar.getTime());			calendar.add(Calendar.DATE, -1);		}		try {			// 드라이버 적재			Class.forName("com.mysql.cj.jdbc.Driver");//			System.out.println("드라이버 적재 성공");			// 데이터베이스 연결			Connection con = YJHotel.getConnection();//			System.out.println("데이터베이스 연결 성공");			// 공통 변수			Statement stmt2 = con.createStatement();			ResultSet rs2 = stmt2.executeQuery("select * from 숙소 order by h_number");			// 호텔 총 몇개			while (rs2.next()) {				h_Total += 1;			}			// 3번			Statement stmt5 = con.createStatement();			ResultSet rs5 = stmt5.executeQuery("SELECT distinct h_location FROM 숙소;");			// 지역 총 몇개			while (rs5.next()) {				loca_Total += 1;			}			// 1번 그래프			Statement stmt = con.createStatement();			ResultSet rs = stmt.executeQuery("select * from 예약 order by b_payment_date desc"); // 테이블 n_date 가져오는 놈			Hotel_Unit = new int[7];			// One_Week[0] = 오늘 날짜			// 최근 일주일 기준으로 예약중 상태인 데이터가 있다면 Hotel_Unit 배열에 저장			while (rs.next()) {				for (int i = 0; i < 7; i++)					if (rs.getString("b_payment_date").equals(One_Week[i]))						if (rs.getString("b_status").equals(stat) || rs.getString("b_status").equals(stat2))							Hotel_Unit[i] += rs.getInt("b_guest_quantity");			}			// 2번, 3번 그래프			h_All_Cnt = new int[h_Total];			h_Name = new String[h_Total];			Statement stmt3 = con.createStatement();			ResultSet rs3 = stmt3.executeQuery("select * from 숙소 order by h_number");			// 호텔 이름 저장			int hni = 0;			while (rs3.next()) {				h_Name[hni] = rs3.getString("h_name");				hni += 1;			}			Statement stmt6 = con.createStatement();			ResultSet rs6 = stmt6.executeQuery("SELECT distinct h_location FROM 숙소;");			// 지역 이름 저장			int lni = 0;			l_All_Cnt = new String[loca_Total][2];			loca_Name = new String[loca_Total];			while (rs6.next()) {				loca_Name[lni] = rs6.getString("h_location");				lni += 1;			}			for (int i = 0; i < loca_Total; i++) {				l_All_Cnt[i][0] = loca_Name[i];//				System.out.println(l_All_Cnt[i][0]);			}			Statement stmt4 = con.createStatement();			ResultSet rs4 = stmt4.executeQuery("select * from 예약");			// 그래프 2			while (rs4.next()) {				if (rs4.getString("b_status").equals(stat) || rs4.getString("b_status").equals(stat2)) // 예약 중인지 비교					h_All_Cnt[rs4.getInt("h_number") - 1] += rs4.getInt("b_guest_quantity");			}			Map<String, Integer> chart2 = new LinkedHashMap<>();			for (int i = 0; i < h_Total; i++) {				chart2.put(h_Name[i], h_All_Cnt[i]);			}//			System.out.println("정렬 전 = " + chart2);			// 정렬			LinkedList<Map.Entry<String, Integer>> list = new LinkedList<Map.Entry<String, Integer>>(chart2.entrySet());			Collections.sort(list, new Comparator<Map.Entry<String, Integer>>() {				public int compare(Map.Entry<String, Integer> o1, Map.Entry<String, Integer> o2) {					return (o1.getValue()).compareTo(o2.getValue());				}			});			HashMap<String, Integer> temp = new LinkedHashMap<String, Integer>();			for (Map.Entry<String, Integer> aa : list) {				temp.put(aa.getKey(), aa.getValue());			}//			System.out.println("\n내림차순 정렬" + temp);			// 정렬된 값 맵에서 각각의 배열에다 저장			chart2_Name = new String[temp.size()];			chart2_Num = new int[temp.size()];			int C2_Iter1 = 0;			// Iterator 사용 3 - entrySet() : key / value			Set<Entry<String, Integer>> ch2_set = temp.entrySet();			Iterator<Entry<String, Integer>> ch2_iterator = ch2_set.iterator();			while (ch2_iterator.hasNext()) {				Entry<String, Integer> entry = (Entry<String, Integer>) ch2_iterator.next();				chart2_Name[C2_Iter1] = (String) entry.getKey();				chart2_Num[C2_Iter1] = (Integer) entry.getValue();				C2_Iter1 += 1;			}			// System.out.println("\n뽑아온 값" + Arrays.toString(chart2_Name));			// System.out.println("\n뽑아온 값" + Arrays.toString(chart2_Num));			Statement stmt7 = con.createStatement();			ResultSet rs7 = stmt7.executeQuery("select * from 예약");			Statement stmt8 = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);			ResultSet rs8 = stmt8.executeQuery("select * from 숙소");			for (int i = 0; i < loca_Total; i++) {				l_All_Cnt[i][1] = "0";			}			// 그래프 3			while (rs7.next()) {				if (rs7.getString("b_status").equals(stat) || rs7.getString("b_status").equals(stat2))					rs8.beforeFirst();				while (rs8.next()) {					if (rs7.getInt("h_number") == rs8.getInt("h_number")) {						for (int i = 0; i < loca_Total; i++)							if (l_All_Cnt[i][0].equals(rs8.getString("h_location"))) {								l_All_Cnt[i][1] = (rs7.getInt("b_guest_quantity") + Integer.parseInt(l_All_Cnt[i][1]))										+ "";							}					}				}			}			for (int i = 0; i < loca_Total; i++) {//				System.out.println(l_All_Cnt[i][0] + "-" + l_All_Cnt[i][1]);			}			Map<String, Integer> chart3 = new LinkedHashMap<>();			for (int i = 0; i < loca_Total; i++) {				chart3.put(l_All_Cnt[i][0], Integer.parseInt(l_All_Cnt[i][1]));			}//			System.out.println("정렬 전 = " + chart3);			// 정렬			LinkedList<Map.Entry<String, Integer>> list3 = new LinkedList<Map.Entry<String, Integer>>(					chart3.entrySet());			Collections.sort(list3, new Comparator<Map.Entry<String, Integer>>() {				public int compare(Map.Entry<String, Integer> o1, Map.Entry<String, Integer> o2) {					return (o1.getValue()).compareTo(o2.getValue());				}			});			HashMap<String, Integer> temp3 = new LinkedHashMap<String, Integer>();			for (Map.Entry<String, Integer> bb : list3) {				temp3.put(bb.getKey(), bb.getValue());			}//			System.out.println("\n내림차순 정렬" + temp3);			// 정렬된 값 맵에서 각각의 배열에다 저장			chart3_Name = new String[temp3.size()];			chart3_Num = new int[temp3.size()];			int C3_Iter1 = 0;			// Iterator 사용 3 - entrySet() : key / value			Set<Entry<String, Integer>> ch3_set = temp3.entrySet();			Iterator<Entry<String, Integer>> ch3_iterator = ch3_set.iterator();			while (ch3_iterator.hasNext()) {				Entry<String, Integer> entry = (Entry<String, Integer>) ch3_iterator.next();				chart3_Name[C3_Iter1] = (String) entry.getKey();				chart3_Num[C3_Iter1] = (Integer) entry.getValue();				C3_Iter1 += 1;			}//			 System.out.println("\n뽑아온 값" + Arrays.toString(chart3_Name));//			 System.out.println("\n뽑아온 값" + Arrays.toString(chart3_Num));			ch_F = loca_Total;		} catch (ClassNotFoundException e) {			System.out.println("드라이버를 찾을 수 없습니다.");			e.printStackTrace();		} catch (SQLException e) {			System.out.println("연결에 실패하였습니다.");			e.printStackTrace();		}	}	// r_G1에 실제로 그래프 그려서 붙임	class paint_chart1 extends JPanel {		private static final long serialVersionUID = 1L;		JPanel p_p1 = new JPanel();		public int[] y = new int[7];		protected void paintComponent(Graphics g) {			super.paintComponent(g);			g.drawLine(0, 0, 0, 140);			g.drawLine(0, 140, 390, 140);			for (int i = 0; i < 7; i++) {				y[i] = 120 - (int) (Hotel_Unit[i] * 1.1);				if (y[i] <= 32)					y[i] = 32;			}			// 선 길이 50씩 할당			g.drawLine(20, y[6], 80, y[5]);			g.drawLine(80, y[5], 140, y[4]);			g.drawLine(140, y[4], 200, y[3]);			g.drawLine(200, y[3], 260, y[2]);			g.drawLine(260, y[2], 320, y[1]);			g.drawLine(320, y[1], 380, y[0]);			g.fillArc(20 - 4, y[6] - 3, 7, 7, 0, 360);			g.fillArc(80 - 4, y[5] - 3, 7, 7, 0, 360);			g.fillArc(140 - 4, y[4] - 3, 7, 7, 0, 360);			g.fillArc(200 - 4, y[3] - 3, 7, 7, 0, 360);			g.fillArc(260 - 4, y[2] - 3, 7, 7, 0, 360);			g.fillArc(320 - 4, y[1] - 3, 7, 7, 0, 360);			g.fillArc(380 - 4, y[0] - 3, 7, 7, 0, 360);		}	}	// r_G2에 실제로 그래프 그려서 붙임	class paint_chart2 extends JPanel {		private static final long serialVersionUID = 1L;		// JPanel p_p2 = new JPanel();		public int[] y = new int[4];		public int[] y2 = new int[4];		int x = 30;		protected void paintComponent(Graphics g) {			super.paintComponent(g);			g.drawLine(0, 5, 0, 140);			g.drawLine(0, 140, 390, 140);			y_per = 0.6;			// must// y[i] + y2[i] = 140			for (int i = 0; i < 4; i++) {				y[i] = 140 - (int) (y_per * chart2_Num[chart2_Num.length - 1 - i]);				if (y[i] <= 20)					y[i] = 20; // 최소 길이 20으로 설정해서 지붕뚫 X				y2[i] = 140 - y[i];//					System.out.printf("\ny[%d] = %d	", i, y[i]);//					System.out.printf("y2[%d] = %d", i, y2[i]);				x += 100;			}			g.setColor(Color.LIGHT_GRAY);			g.fillRect(30, y[0], 30, y2[0]);			g.fillRect(130, y[1], 30, y2[1]);			g.fillRect(230, y[2], 30, y2[2]);			g.fillRect(330, y[3], 30, y2[3]);			g.setColor(Color.BLACK);			g.drawRect(30, y[0], 30, y2[0]);			g.drawRect(130, y[1], 30, y2[1]);			g.drawRect(230, y[2], 30, y2[2]);			g.drawRect(330, y[3], 30, y2[3]);		}	}	// r_G3에 실제로 그래프 그려서 붙임	class paint_chart3 extends JPanel {		private static final long serialVersionUID = 1L;		JPanel p_p3 = new JPanel();		public int[] y;		public int[] y2;		int x = 30;		protected void paintComponent(Graphics g) {			super.paintComponent(g);			g.drawLine(0, 5, 0, 140);			g.drawLine(0, 140, 390, 140);			y_per = 0.6;			// 그래프 총 4개 그릴건데 데이터가(지역이) 그것보다 작아도 알아서 크기 지정해서 그리게 함			if (ch_F > 4)				ch_F = 4;			y = new int[ch_F];			y2 = new int[ch_F];			for (int i = 0; i < ch_F; i++) {				y[i] = 140 - (int) (y_per * chart3_Num[chart3_Num.length - 1 - i]);				if (y[i] <= 20)					y[i] = 20; // 최소 길이 20으로 설정해서 지붕뚫 X				y2[i] = 140 - y[i];//					System.out.printf("\ny[%d] = %d	", i, y[i]);//					System.out.printf("y2[%d] = %d", i, y2[i]);				x += 100;			}			g.setColor(Color.LIGHT_GRAY);			if (ch_F >= 1)				g.fillRect(30, y[0], 30, y2[0]);			if (ch_F >= 2)				g.fillRect(130, y[1], 30, y2[1]);			if (ch_F >= 3)				g.fillRect(230, y[2], 30, y2[2]);			if (ch_F >= 4)				g.fillRect(330, y[3], 30, y2[3]);			g.setColor(Color.BLACK);			if (ch_F >= 1)				g.drawRect(30, y[0], 30, y2[0]);			if (ch_F >= 2)				g.drawRect(130, y[1], 30, y2[1]);			if (ch_F >= 3)				g.drawRect(230, y[2], 30, y2[2]);			if (ch_F >= 4)				g.drawRect(330, y[3], 30, y2[3]);		}	}}